name: TinyORM Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: clear;nuget,GitHub,readwrite;nugettimeout,3600

jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: ['windows-2022', 'ubuntu-22.04']
        vcpkg_library_linkage: ['dynamic', 'static']
        build_type: ['Debug', 'Release']
        include:
          - os: 'ubuntu-22.04'
            mono: 'mono'
          - os: 'windows-2022'
            mono: ''
          - os: 'ubuntu-22.04'
            vcpkg_library_linkage: 'static'
            vcpkg_target_triplet: 'x64-linux'
          - os: 'windows-2022'
            vcpkg_library_linkage: 'dynamic'
            vcpkg_target_triplet: 'x64-windows'
          - os: 'windows-2022'
            vcpkg_library_linkage: 'static'
            vcpkg_target_triplet: 'x64-windows-static'
        exclude:
          - os: 'ubuntu-22.04'
            vcpkg_library_linkage: 'dynamic'
  
    permissions:
      contents: read
      packages: write
  
    runs-on: ${{ matrix.os }}-8-cores

    env:
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_target_triplet }}
      BUILD_TYPE: ${{ matrix.build_type }}
    
    steps:
    - name: Update ubuntu repository
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get upgrade
      
    - name: Install ubuntu icu dependencies
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      shell: bash
      run: sudo apt-get install autoconf-archive
    
    - name: Install ubuntu qtbase dependencies (documented)
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      shell: bash
      run: sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

    - name: Install ubuntu qtbase dependencies (undocumented)
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      shell: bash
      run: sudo apt-get install libgl1-mesa-dev mesa-common-dev
        
    
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Bootstrap VCPKG
      shell: bash
      run: ./vcpkg/bootstrap-vcpkg.sh

    - name: Setup NuGet
      shell: bash
      run: |
        ${{matrix.mono}} $((./vcpkg/vcpkg fetch nuget) | tail -n 1) sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"
        ${{matrix.mono}} $((./vcpkg/vcpkg fetch nuget) | tail -n 1) setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        ${{matrix.mono}} $((./vcpkg/vcpkg fetch nuget) | tail -n 1) sources

    - name: Build
      shell: pwsh
      run: ./build.ps1
      
    - name: Run Tests
      shell: pwsh
      run: pwsh ./test.ps1

    - name: Archive VCPKG Log Files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: buildlogs
        path: |
          vcpkg/buildtrees/*/*.txt
          vcpkg/buildtrees/*/*.log

    - name: Create Test Result Artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Test Results (${{ matrix.vcpkg_target_triplet }})
        path: |
          build/*.xml

          
          
  publish-teshresults:
    name: Publish Test Results
    needs: build
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            artifacts/**/*.xml
